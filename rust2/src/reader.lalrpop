use std::str::FromStr;

use crate::types::{MalForm, MalAtom, MalKey};
use crate::utils::unescape;

grammar<'err>(errors: &'err mut Vec<lalrpop_util::ParseError<usize, (usize, &'input str), &'static str>>);

pub Form: MalForm = <FormInner> ws?;

FormInner: MalForm = {
    ws? <atom:Atom> => MalForm::Atom(atom),
    ws? <list:List> => MalForm::List(list),
    ws? <vector:Vector> => MalForm::Vector(vector),
    ws? <hash:HashMap> => MalForm::HashMap(hash.into_iter().collect()),
    ws? "'"  <form:FormInner> => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("quote".to_string()))), form)),
    ws? "`"  <form:FormInner> => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("quasiquote".to_string()))), form)),
    ws? "~"  <form:FormInner> => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("unquote".to_string()))), form)),
    ws? "~@" <form:FormInner> => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("splice-unquote".to_string()))), form)),
    ws? "@"  <form:FormInner> => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("deref".to_string()))), form)),
    ws? "^"  <meta:FormInner>
             <val:FormInner>  => MalForm::List(vec!(MalForm::Atom(MalAtom::Key(MalKey::Symbol("with-meta".to_string()))), val, meta)),
}

ws: () = { Whitespace, Comment };
Whitespace = r"[\s,]+";
Comment = r";.*";

List = "(" <FormInner*> ws? ")";
Vector = "[" <FormInner*> ws? "]";
HashMap = "{" <(<Key> <FormInner>)*> ws? "}";

Key: MalKey = <lo:@L> <atom:Atom> <hi:@R> => match atom {
    MalAtom::Key(x) => x,
    MalAtom::Number(_) => {
        errors.push(lalrpop_util::ParseError::UnrecognizedToken {
            token: Some((lo, (lo, "blah"), hi)),
            expected: vec!("hash key".to_string())
        });
        MalKey::Symbol("void".to_string())
    }
};

Atom: MalAtom = { String, NumOrSymbol };

NumOrSymbol: MalAtom = <s:r#"[^@~\s\[\]{}('"`,;)][^\s\[\]{}('"`,;)]*"#> => match f32::from_str(s) {
    Ok(n) => MalAtom::Number(n),
    Err(_) => MalAtom::Key(MalKey::Symbol(String::from(s))),
};

String: MalAtom = <s:r#""(?:\\.|[^\\"])*"?"#> => {
    if s.chars().last().unwrap() != '"' {
        errors.push(lalrpop_util::ParseError::User { error: "unbalanced quote" });
    }
    MalAtom::Key(MalKey::String(unescape(s)))
};
