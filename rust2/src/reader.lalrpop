use std::str::FromStr;

use crate::types::{MalForm, MalKey};
use crate::utils::unescape;

grammar<'err>(errors: &'err mut Vec<lalrpop_util::ParseError<usize, (usize, String), &'static str>>);

pub Form: MalForm = <FormInner> ws?;

FormInner: MalForm = {
    ws? <Atom>,
    ws? <list:List> => MalForm::List(list),
    ws? <vector:Vector> => MalForm::Vector(vector),
    ws? <hash:HashMap> => MalForm::HashMap(hash.into_iter().collect()),
    ws? "'"  <form:FormInner> => MalForm::List(vec!(MalForm::Symbol("quote".to_string()), form)),
    ws? "`"  <form:FormInner> => MalForm::List(vec!(MalForm::Symbol("quasiquote".to_string()), form)),
    ws? "~"  <form:FormInner> => MalForm::List(vec!(MalForm::Symbol("unquote".to_string()), form)),
    ws? "~@" <form:FormInner> => MalForm::List(vec!(MalForm::Symbol("splice-unquote".to_string()), form)),
    ws? "@"  <form:FormInner> => MalForm::List(vec!(MalForm::Symbol("deref".to_string()), form)),
    ws? "^"  <meta:FormInner>
             <val:FormInner>  => MalForm::List(vec!(MalForm::Symbol("with-meta".to_string()), val, meta)),
}

ws: () = { Whitespace, Comment };
Whitespace = r"[\s,]+";
Comment = r";.*";

List = "(" <FormInner*> ws? ")";
Vector = "[" <FormInner*> ws? "]";
HashMap = "{" <(<Key> <FormInner>)*> ws? "}";

Atom: MalForm = {
    "true" => MalForm::Bool(true),
    "false" => MalForm::Bool(false),
    "nil" => MalForm::Nil,
    Key => MalForm::Key(<>),
    NumOrSymbol,
};

NumOrSymbol: MalForm = <s:r#"[^@~\s\[\]{}('"`,:;)][^\s\[\]{}('"`,;)]*"#> => match f64::from_str(s) {
    Ok(n) => MalForm::Number(n),
    Err(_) => MalForm::Symbol(String::from(s)),
};

Key = { String, Keyword };

String: MalKey = <s:r#""(?:\\.|[^\\"])*"?"#> => {
    if s.chars().last().unwrap() != '"' {
        errors.push(lalrpop_util::ParseError::User { error: "Detected unbalanced quote" });
    }
    MalKey::String(unescape(s))
};

Keyword: MalKey = r#":[^\s\[\]{}('"`,;)]*"# => MalKey::Keyword(<>[1..].to_string());
